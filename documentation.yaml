swagger: "2.0"

info:
  description: "This is a simple restful api example."
  version: "1.0.0"
  title: "Dormitory API"

schemes:
  - https
basePath: /api

consumes:
  - application/json
produces:
  - application/json

tags:
- name: "rooms"
  description: "Everything about rooms"
- name: "students"
  description: "Everything about studnets"

paths:
  
  /rooms:
    
    get:
      tags:
        - "rooms"
      summary: "Get rooms"
      description: "Get list of all rooms"
      parameters:
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/sortParam'
        - $ref: '#/parameters/filterParam'
      responses:
        200:
          description: "Success response"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Room'
    
    post:
      tags:
        - "rooms"
      summary: "Create room"
      parameters: 
      - in: "body"
        name: "body"
        description: "Created room object"
        required: true
        schema:
          $ref: '#/definitions/Room'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
        
  /rooms/{roomId}:

    parameters:
      - name: "roomId"
        in: "path"
        description: "The room ID"
        required: true
        type: "integer"
        format: "int64"

    get:
      tags:
        - "rooms"
      summary: "Find room by ID"
      description: "Returns a single room"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Room'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    

    put:
      tags:
        - "rooms"
      summary: "Update room"
      parameters:
      - in: "body"
        name: "body"  
        description: "Updated room object"
        required: true
        schema:
          $ref: '#/definitions/Room'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'        

    delete:
      tags:
        - "rooms"
      summary: "Delete room"
      description: "Delete room by ID"
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    

  
  /rooms/{roomId}/students:

    parameters:
      - name: "roomId"
        in: "path"
        description: "The room ID"
        required: true
        type: "integer"
        format: "int64"

    get:
      tags:
        - "rooms"
      summary: "Get students out of certian room"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Student'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
    
    post:
      tags:
        - "rooms"
      summary: "Add student to the room"
      parameters: 
      - in: "body"
        name: "body"
        description: "Created student object"
        required: true
        schema:
          $ref: '#/definitions/Student'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'       
        405:
          description: "Invalid input"
    
    
    
  /students:
    
    get:
      tags:
        - "students"
      summary: "Get students"
      description: "Get list of all students"
      parameters:
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/sortParam'
        - $ref: '#/parameters/filterParam'
      responses:
        200:
          description: "Success response"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Student'
    
    post:
      tags:
        - "students"
      summary: "Create student"
      parameters: 
      - in: "body"
        name: "body"
        description: "Created student object"
        required: true
        schema:
          $ref: '#/definitions/Student'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
        405:
          description: "Invalid input"

  
  /students/{studentId}:
    
    parameters:
      - name: "studentId"
        in: "path"
        description: "The student ID"
        required: true
        type: "integer"
        format: "int64"
    
    get:
      tags:
        - "students"
      summary: "Find student by ID"
      description: "Returns a single student"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Student'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
    
    put:
      tags:
        - "students"
      summary: "Update student"
      description: ""
      parameters:
      - in: "body"
        name: "body"  
        description: "Updated student object"
        required: true
        schema:
          $ref: '#/definitions/Student'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'        
    
    delete:
      tags:
        - "students"
      summary: "Delete student"
      description: "Delete student by ID"
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
  

  /students/{studentId}/room:
    
    parameters:
      - name: "studentId"
        in: "path"
        description: "The student ID"
        required: true
        type: "integer"
        format: "int64"
    
    get:
      tags:
        - "students"
      summary: "Get room for certian student"
      responses:
        200:
          description: "Success response"
          schema:
              $ref: '#/definitions/Room'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
    
    put:
      tags:
        - "students"
      summary: "Change student room"
      description: "" 
      parameters:
      - in: "body"
        name: "body"
        description: "Update room object"
        required: true
        schema:
          $ref: '#/definitions/Room'
      responses:
        201:
           description: "Successful operation"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'    
        405:
          description: "Invalid input"


parameters:

  offsetParam:
    name: "offset"
    in: "query"
    required: false
    type: "integer"
    minimum: 0
    description: "The number of items to skip before starting to collect the result set."
    
  limitParam:
    name: "limit"
    in: "query"
    required: false
    type: "integer"
    minimum: 1
    maximum: 100
    default: 20
    description: "The numbers of items to return."
  
  filterParam:
    name: "tags"
    in: "query"
    description: "Tags to filter by"
    required: false
    type: "array"
    collectionFormat: "multi"
    items:
      type: "string"
  
  sortParam:
    name: "sort"
    in: "query"
    required: false
    type: "array"
    collectionFormat: "csv"
    items:
      type: "string"
  
definitions:

  Room:
    type: "object"
    required: 
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    
  Student:
    type: "object"
    required:
      - "name"
      - "birthday"
      - "room"
      - "sex"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      birthday:
        type: "string"
        format: "date"
      room:
         $ref: "#/definitions/Room"
      sex:
        type: "string"
        enum: ["M","F"]

components:
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
          
